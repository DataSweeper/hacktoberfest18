#include <iostream>
using namespace std;
#define ll long long int

void buildtree(ll ar[], ll segtree[], ll low, ll high, ll pos)
{
    ll mid;
    if(low==high)
    {
        segtree[pos]=ar[low];
        return;
    }
    mid=(low+high)/2;
    buildtree(ar,segtree,low,mid,2*pos);
    buildtree(ar,segtree,mid+1,high,2*pos+1);
    segtree[pos]=min(segtree[2*pos],segtree[2*pos+1]);
}

ll querry(ll segtree[], ll qlow, ll qhigh, ll low, ll high, ll pos)
{
    ll mid;
    if(qlow<=low && qhigh>=high)
    {
        cout<<"POS   "<<pos<<"\n";
        return segtree[pos];
    }
    if(qlow>high || qhigh<low)
        return 100000007;
    mid=(low+high)/2;
    return min(querry(segtree,qlow,qhigh,low,mid,2*pos),querry(segtree,qlow,qhigh,mid+1,high,2*pos+1));
}

void update(ll segtree[], ll idx, ll val, ll low, ll high, ll pos)
{
    ll mid;
    if(low==high)
    {
        segtree[pos]=val;
        return;
    }
    else{
    mid=(low+high)/2;
    if(idx>=low && idx<=mid)
        update(segtree,idx,val,low,mid,2*pos);
    else
        update(segtree,idx,val,mid+1,high,2*pos+1);
    segtree[pos]=min(segtree[pos*2],segtree[pos*2+1]);
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    ll n,q,ar[10007],segtree[40007],i,x,y;
    cin>>n;
    char s;
    for(i=1;i<=n;i++)
        cin>>ar[i];
    buildtree(ar,segtree,1,n,1);
    /*for(i=0;i<15;i++)
        cout<<segtree[i]<<" ";
    cout<<"\n";*/
    cin>>q;
    while(q--)
    {
        cin>>s>>x>>y;
        if(s=='Q')
            cout<<querry(segtree,x,y,1,n,1)<<"\n";
        else
            update(segtree,x,y,1,n,1);
    }
    return 0;
}
